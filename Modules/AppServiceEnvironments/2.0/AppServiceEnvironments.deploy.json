{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "aseName": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the Application Service Environment"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources"
      }
    },
    "aseIPSSLAddressCount": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Optional. Number of IP addresses for the IP-SSL address pool.  This value *must* be zero when internalLoadBalancing mode is set to either 1 or 3"
      }
    },
    "aseInternalLoadBalancingMode": {
      "type": "int",
      "allowedValues": [ 0, 1, 2, 3 ],
      "defaultValue": 1,
      "metadata": {
        "description": "Optional. 0 = public VIP only, 1 = only ports 80/443 are mapped to ILB VIP, 2 = only FTP ports are mapped to ILB VIP, 3 = both ports 80/443 and FTP ports are mapped to an ILB VIP"
      }
    },
    "dnsSuffix": {
      "type": "string",
      "metadata": {
        "description": "Required. Used *only* when deploying an ILB enabled ASE. Set this to the root domain associated with the ASE. For example: contoso.com"
      }
    },
    "appInsightsKey": {
      "type": "string",
      "metadata": {
        "description": "Required. Instrumentation Key the Application Insights Resource"
      }
    },
    "webServicePlanName": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the Web Application Service Plan"
      }
    },
    "webAppPortalName": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the Web Application Portal Name"
      }
    },
    "webWorkerPool": {
      "type": "string",
      "allowedValues": [
        "1",
        "2",
        "3"
      ],
      "defaultValue": "1",
      "metadata": {
        "description": "Optional. Defines which worker pool's (1=Small, 2=Medium, 3=Large) resources will be used for the app service plan"
      }
    },
    "webWorkers": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Optional. Defines the number of workers from the worker pool that will be used by the app service plan"
      }
    },
    "vnetResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Required. The resource group name that contains the vnet"
      }
    },
    "vnetResourceName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the virtual network"
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "Required. Subnet name that will contain the App Service Environment"
      }
    },
    "frontEndSize": {
      "type": "string",
      "allowedValues": [
        "Medium",
        "Large",
        "ExtraLarge"
      ],
      "defaultValue": "Medium",
      "metadata": {
        "description": "Optional. Instance size for the front-end pool. Maps to P2,P3,P4"
      }
    },
    "frontEndCount": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Optional. Number of instances in the front-end pool. Minimum of two"
      }
    },
    "minimumCapacityProfile": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Optional. The minimum capacity. Autoscale engine will ensure the instance count is at least this value"
      }
    },
    "maximumCapacityProfile": {
      "type": "int",
      "defaultValue": 20,
      "metadata": {
        "description": "Optional. The maximum capacity. Autoscale engine will ensure the instance count is not greater than this value"
      }
    },
    "defaultCapacityProfile": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Optional. The default capacity. Autoscale engine will preventively set the instance count to be this value if it can not find any metric data"
      }
    },
    "metricName": {
      "type": "string",
      "defaultValue": "CpuPercentage",
      "metadata": {
        "description": "Optional. The metric name"
      }
    },
    "metricThresholdToScaleOut": {
      "type": "int",
      "defaultValue": 60,
      "metadata": {
        "description": "Optional. The metric upper threshold.  If the metric value is above this threshold then autoscale engine will initiate scale out action"
      }
    },
    "metricThresholdToScaleIn": {
      "type": "int",
      "defaultValue": 10,
      "metadata": {
        "description": "Optional. The metric lower threshold.  If the metric value is below this threshold then autoscale engine will initiate scale in action"
      }
    },
    "changePercentScaleOut": {
      "type": "int",
      "defaultValue": 20,
      "metadata": {
        "description": "Optional. The percentage to increase the instance count when autoscale engine is initiating scale out action"
      }
    },
    "changePercentScaleIn": {
      "type": "int",
      "defaultValue": 10,
      "metadata": {
        "description": "Optional. The percentage to decrease the instance count when autoscale engine is initiating scale in action"
      }
    },
    "autoscaleEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. A boolean to indicate whether the autoscale policy is enabled or disabled"
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "metadata": {
        "description": "Required. Resource identifier of the Diagnostic Storage Account"
      }
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "metadata": {
        "description": "Reguired. Resource identifier of Log Analytics Workspace"
      }
    },
    "logsRetentionInDays": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 0,
      "maxValue": 365,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for, a value of 0 will retain data indefinitely"
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
      }
    },
    "tagValues": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Azure Resource Tags object"
      }
    }
  },
  "variables": {
    "appServiceEnvironmentName": "[parameters('aseName')]",
    "appServiceEnvironmentResourceId": "[resourceId('Microsoft.Web/hostingEnvironments',variables('appServiceEnvironmentName'))]",
    "appServiceEnvironmentApiVersion": "[providers('Microsoft.Web','hostingEnvironments').apiVersions[0]]",
    "webServerFarmApiVersion": "[providers('Microsoft.Web','serverfarms').apiVersions[0]]",
    "autoscaleApiVersion": "[providers('Microsoft.Insights','autoscalesettings').apiVersions[0]]",
    "webSiteApiVersion": "[providers('Microsoft.Web','sites').apiVersions[0]]",
    "WebPortalURL": "[concat('https://', parameters('webAppPortalName'),'.',parameters('dnsSuffix'))]",
    "diagnosticSettingName": "[concat(variables('appServiceEnvironmentName'), '/','Microsoft.Insights/service')]",
    "diagnosticStorageAccountId": "[parameters('diagnosticStorageAccountId')]",
    "diagnosticWorkspaceId": "[parameters('logAnalyticsWorkspaceId')]",
    "virtualNetworkSubnetId": "[resourceId(parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetResourceName'), parameters('subnetName'))]",
    "virtualNetworkId": "[resourceId(parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('vnetResourceName'))]",
    "targetResourceId": "[resourceId('Microsoft.Web/serverFarms/', parameters('webServicePlanName'))]",
    "settingName": "[concat(toLower(parameters('webServicePlanName')), '-setting')]",
    "pidName": "[concat('pid-', parameters('cuaId'))]"
  },
  "resources": [
    {
      "condition": "[not(empty(parameters('cuaId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2018-02-01",
      "name": "[variables('pidName')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.Web/hostingEnvironments",
      "apiVersion": "[variables('appServiceEnvironmentApiVersion')]",
      "name": "[variables('appServiceEnvironmentName')]",
      "kind": "ASEV2",
      "location": "[parameters('location')]",
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "properties": {
        "name": "[parameters('aseName')]",
        "location": "[parameters('location')]",
        "ipSSLAddressCount": "[parameters('aseipSSLAddressCount')]",
        "internalLoadBalancingMode": "[parameters('aseInternalLoadBalancingMode')]",
        "dnsSuffix": "[parameters('dnsSuffix')]",
        "virtualNetwork": {
          "id": "[variables('virtualNetworkId')]",
          "subnet": "[parameters('subnetName')]"
        },
        "resources": [
          {
            "type": "Microsoft.Web/hostingEnvironments/providers/diagnosticsettings",
            "apiVersion": "2017-05-01-preview",
            "name": "[variables('diagnosticSettingName')]",
            "dependsOn": [
              "[variables('appServiceEnvironmentResourceId')]"
            ],
            "properties": {
              "storageAccountId": "[variables('diagnosticStorageAccountId')]",
              "workspaceId": "[variables('diagnosticWorkspaceId')]",
              "logs": [
                {
                  "category": "AppServiceEnvironmentPlatformLogs",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('logsRetentionInDays')]"
                  }
                }
              ]
            }
          }
        ],
        "multiSize": "[parameters('frontEndSize')]",
        "multiRoleCount": "[parameters('frontEndCount')]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "[variables('webServerFarmApiVersion')]",
      "name": "[parameters('webServicePlanName')]",
      "location": "[parameters('location')]",
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "properties": {
        "name": "[parameters('webServicePlanName')]",
        "hostingEnvironmentProfile": {
          "id": "[variables('appServiceEnvironmentResourceId')]"
        }
      },
      "sku": {
        "name": "[concat('I',parameters('webWorkerPool'))]",
        "tier": "Isolated",
        "size": "[concat('I',parameters('webWorkerPool'))]",
        "family": "I",
        "capacity": "[parameters('webWorkers')]"
      },
      "dependsOn": [
        "[variables('appServiceEnvironmentResourceId')]"
      ]
    },
    {
      "type": "Microsoft.Insights/autoscalesettings",
      "apiVersion": "[variables('autoscaleApiVersion')]",
      "name": "[variables('settingName')]",
      "location": "[parameters('location')]",
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('webServicePlanName'))]",
        "[resourceId('Microsoft.Web/sites', parameters('webAppPortalName'))]"
      ],
      "properties": {
        "profiles": [
          {
            "name": "DefaultAutoscaleProfile001",
            "capacity": {
              "minimum": "[parameters('minimumCapacityProfile')]",
              "maximum": "[parameters('maximumCapacityProfile')]",
              "default": "[parameters('defaultCapacityProfile')]"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "[parameters('metricName')]",
                  "metricNamespace": "",
                  "metricResourceUri": "[variables('targetResourceId')]",
                  "timeGrain": "PT5M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": "[parameters('metricThresholdToScaleOut')]"
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "PercentChangeCount",
                  "value": "[parameters('changePercentScaleOut')]",
                  "cooldown": "PT10M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "[parameters('metricName')]",
                  "metricNamespace": "",
                  "metricResourceUri": "[variables('targetResourceId')]",
                  "timeGrain": "PT5M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": "[parameters('metricThresholdToScaleIn')]"
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "PercentChangeCount",
                  "value": "[parameters('changePercentScaleIn')]",
                  "cooldown": "PT10M"
                }
              }
            ]
          }
        ],
        "enabled": "[parameters('autoscaleEnabled')]",
        "targetResourceUri": "[variables('targetResourceId')]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "[variables('webSiteApiVersion')]",
      "name": "[parameters('webAppPortalName')]",
      "location": "[parameters('location')]",
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "properties": {
        "name": "[parameters('webAppPortalName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('webServicePlanName'))]",
        "httpsOnly": true,
        "clientAffinityEnabled": false,
        "hostingEnvironmentProfile": {
          "id": "[variables('appServiceEnvironmentResourceId')]"
        },
        "siteConfig": {
          "use32BitWorkerProcess": false,
          "alwaysOn": true,
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[parameters('appInsightsKey')]"
            },
            {
              "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
              "value": "~2"
            }
          ]
        }
      },
      "resources": [
        {
          "type": "Microsoft.Web/sites/providers/diagnosticsettings",
          "apiVersion": "2017-05-01-preview",
          "name": "[concat(parameters('webAppPortalName'), '/', 'Microsoft.Insights/service')]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', parameters('webAppPortalName'))]"
          ],
          "properties": {
            "storageAccountId": "[variables('diagnosticStorageAccountId')]",
            "workspaceId": "[variables('diagnosticWorkspaceId')]",
            "logs": [
              {
                "category": "AppServiceHTTPLogs",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": "[parameters('logsRetentionInDays')]"
                }
              },
              {
                "category": "AppServiceConsoleLogs",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": "[parameters('logsRetentionInDays')]"
                }
              },
              {
                "category": "AppServiceAppLogs",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": "[parameters('logsRetentionInDays')]"
                }
              },
              {
                "category": "AppServiceFileAuditLogs",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": "[parameters('logsRetentionInDays')]"
                }
              },
              {
                "category": "AppServiceAuditLogs",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": "[parameters('logsRetentionInDays')]"
                }
              }
            ],
            "metrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('logsRetentionInDays')]",
                  "enabled": true
                }
              }
            ]
          }
        }
      ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('webServicePlanName'))]"
      ]
    }
  ],
  "outputs": {
    "appServiceEnvironmentName": {
      "type": "string",
      "value": "[variables('appServiceEnvironmentName')]",
      "metadata": {
        "description": "The Name of the Application Service Environment"
      }
    },
    "appServiceEnvironmentResourceId": {
      "type": "string",
      "value": "[variables('appServiceEnvironmentResourceId')]",
      "metadata": {
        "description": "The Resource Id of the Application Service Environment"
      }
    },
    "appServiceEnvironmentResourceGroup": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The name of the Resource Group with the Application Service Environment"
      }
    },
    "appServiceEnvironmentWebPortalURL": {
      "type": "string",
      "value": "[variables('webPortalURL')]",
      "metadata": {
        "description": "The Web Portal URL for the Application Service Environment"
      }
    }
  }
}