{
  "$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "sqlServerName": {
      "type": "string",
      "metadata": {
        "description": "Required. Enter the SQL Server Name"
      }
    },
    "sqlAdministratorLogin": {
      "type": "string",
      "metadata": {
        "description": "Required. Enter the SQL Server User Name"
      }
    },
    "sqlAdministratorLoginPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Required. Enter the SQL Server User Password"
      }
    },
    "sqlDatabasesNames": {
      "type": "array",
      "metadata": {
        "description": "Required. Enter the SQL databases names to be created"
      }
    },
    "sqlDatabaseCollation": {
      "type": "string",
      "defaultValue": "SQL_Latin1_General_CP1_CI_AS",
      "metadata": {
        "description": "Optional. Enter SQL Database collation"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location of all the Resources"
      }
    },
    "allowAzureIps": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Whether the database is accessible by the Azure services"
      }
    },
    "firewallvNetruleList": {
      "type": "array",
      "metadata": {
        "description": "Required. SQL Server firewall vNet rules list"
      }
    },
    "firewallruleList": {
      "type": "array",
      "metadata": {
        "description": "Required. SQL Server firewall rule list"
      }
    },
    "skuName": {
      "type": "array",
      "defaultValue": "S1",
      "metadata": {
        "description": "Optional. Name of the SQL Databse sku"
      }
    },
    "skuTier": {
      "type": "array",
      "defaultValue": "Standard",
      "metadata": {
        "description": "Optional. Name of the SQL Database tier"
      }
    },
    "diagnosticStorageAccountAccessKey": {
      "type": "string",
      "metadata": {
        "description": "Required. Access key for the storage account to be used for security diagnostics"
      }
    },
    "retentionDays": {
      "type": "int",
      "defaultValue": 365,
      "metadata": {
        "description": "Optional. Specify the number of days data will be retained for"
      }
    },
    "diagnosticStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Required. Storage Account for diagnostics"
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "metadata": {
        "description": "Required. Resource identifier of the Diagnostic Storage Account"
      }
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "metadata": {
        "description": "Required. Resource identifier of Log Analytics Workspace"
      }
    },
    "logsRetentionInDays": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 0,
      "maxValue": 365,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely"
      }
    },
    "sqlServerActiveDirectoryGroupName": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the AAD group which will be set as a SQL Administrator"
      }
    },
    "sqlServerActiveDirectoryGroupId": {
      "type": "string",
      "metadata": {
        "description": "Required. object ID of the AAD group which will be set as a SQL Administrator"
      }
    },
    "sqlServerTenantId": {
      "type": "string",
      "metadata": {
        "description": "Required. Azure tenant id where the SQL Server is created"
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
      }
    },
    "tagValues": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Azure Resource Tags object"
      }
    }
  },
  "variables": {
    "sqlServerdbName": "[parameters('sqlServerName')]",
    "sqlServerdbResourceId": "[resourceId('Microsoft.Sql/servers',variables('sqlServerdbName'))]",
    "sqlServerdbApiVersion": "[providers('Microsoft.Sql','servers').apiVersions[0]]",
    "diagnosticSettingName": "[concat(variables('sqlServerdbName'),'/','Microsoft.Insights/service')]",
    "diagnosticStorageAccountId": "[parameters('diagnosticStorageAccountId')]",
    "diagnosticWorkspaceId": "[parameters('logAnalyticsWorkspaceId')]",
    "sqldbConnectionStringsToOutput": {
      "copy": [
        {
          "name": "sqldbConnectionStringsOutput",
          "count": "[length(parameters('sqlDatabasesNames'))]",
          "input": "[parameters('sqlDatabasesNames')[copyIndex('sqldbConnectionStringsOutput')].databaseName]"
        }
      ]
    },
    "pidName": "[concat('pid-', parameters('cuaId'))]"
  },
  "resources": [
    {
      "condition": "[not(empty(parameters('cuaId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2018-02-01",
      "name": "[variables('pidName')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "[variables('sqlServerdbApiVersion')]",
      "name": "[variables('sqlServerdbName')]",
      "location": "[parameters('location')]",
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "properties": {
        "administratorLogin": "[parameters('sqlAdministratorLogin')]",
        "administratorLoginPassword": "[parameters('sqlAdministratorLoginPassword')]",
        "version": "12.0"
      },
      "resources": [
        {
          "type": "administrators",
          "name": "ActiveDirectory",
          "apiVersion": "2014-04-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]"
          ],
          "properties": {
            "administratorType": "ActiveDirectory",
            "login": "[parameters('sqlServerActiveDirectoryGroupName')]",
            "sid": "[parameters('sqlServerActiveDirectoryGroupId')]",
            "tenantId": "[parameters('sqlServerTenantId')]"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Sql/servers/auditingSettings",
      "apiVersion": "[providers('Microsoft.Sql','servers/auditingSettings').apiVersions[0]]",
      "name": "[concat(parameters('sqlServerName'), '/Default')]",
      "properties": {
        "State": "Enabled",
        "storageEndpoint": "[concat('https://', parameters('diagnosticStorageAccountName'), '.blob.core.windows.net/')]",
        "storageAccountAccessKey": "[parameters('diagnosticStorageAccountAccessKey')]",
        "storageAccountSubscriptionId": "[subscription().subscriptionId]",
        "retentionDays": "[parameters('retentionDays')]",
        "auditActionsAndGroups": [
          "BATCH_STARTED_GROUP",
          "BATCH_COMPLETED_GROUP",
          "APPLICATION_ROLE_CHANGE_PASSWORD_GROUP",
          "BACKUP_RESTORE_GROUP",
          "DATABASE_LOGOUT_GROUP",
          "DATABASE_OBJECT_CHANGE_GROUP",
          "DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP",
          "DATABASE_OBJECT_PERMISSION_CHANGE_GROUP",
          "FAILED_DATABASE_AUTHENTICATION_GROUP",
          "SCHEMA_OBJECT_ACCESS_GROUP",
          "SCHEMA_OBJECT_CHANGE_GROUP",
          "SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP",
          "SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP",
          "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
          "USER_CHANGE_PASSWORD_GROUP",
          "DATABASE_PERMISSION_CHANGE_GROUP",
          "DATABASE_PRINCIPAL_CHANGE_GROUP",
          "DATABASE_PRINCIPAL_IMPERSONATION_GROUP",
          "DATABASE_ROLE_MEMBER_CHANGE_GROUP",
          "DATABASE_OPERATION_GROUP"
        ],
        "isStorageSecondaryKeyInUse": false
      },
      "dependsOn": [
        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]",
        "DatabaseLoop"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/securityAlertPolicies",
      "apiVersion": "[providers('Microsoft.Sql','servers/securityAlertPolicies').apiVersions[0]]",
      "name": "[concat(parameters('sqlServerName'), '/Default')]",
      "properties": {
        "state": "Enabled",
        "disabledAlerts": [
          ""
        ],
        "emailAddresses": [
          ""
        ],
        "emailAccountAdmins": true,
        "retentionDays": "[parameters('retentionDays')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/vulnerabilityAssessments",
      "apiVersion": "[providers('Microsoft.Sql','servers/vulnerabilityAssessments').apiVersions[0]]",
      "name": "[concat(parameters('sqlServerName'), '/Default')]",
      "properties": {
        "storageContainerPath": "[concat('https://',parameters('diagnosticStorageAccountName'), '.blob.core.windows.net/', 'vulnerability-assessment')]",
        "storageAccountAccessKey": "[parameters('diagnosticStorageAccountAccessKey')]",
        "recurringScans": {
          "isEnabled": true,
          "emailSubscriptionAdmins": true,
          "emails": []
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]",
        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'), '/securityAlertPolicies/Default')]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "[providers('Microsoft.Sql','servers/databases').apiVersions[0]]",
      "name": "[concat(parameters('sqlServerName'), '/', parameters('sqlDatabasesNames')[copyIndex()].databaseName)]",
      "location": "[parameters('location')]",
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "sku": {
        "name": "[parameters('skuName')[copyIndex()].Name]",
        "tier": "[parameters('skuTier')[copyIndex()].Tier]"
      },
      "properties": {
        "collation": "[parameters('sqlDatabaseCollation')]"
      },
      "resources": [
        {
          "type": "backupLongTermRetentionPolicies",
          "apiVersion": "[providers('Microsoft.Sql','servers/databases/backupLongTermRetentionPolicies').apiVersions[0]]",
          "name": "default",
          "properties": {
            "weeklyRetention": "P1W"
          },
          "dependsOn": [
            "[parameters('sqlDatabasesNames')[copyIndex()].databaseName]"
          ]
        },
        {
          "type": "transparentDataEncryption",
          "apiVersion": "[providers('Microsoft.Sql','servers/databases/transparentDataEncryption').apiVersions[0]]",
          "name": "current",
          "properties": {
            "status": "Enabled"
          },
          "dependsOn": [
            "[parameters('sqlDatabasesNames')[copyIndex()].databaseName]"
          ]
        },
        {
          "type": "providers/diagnosticSettings",
          "apiVersion": "2017-05-01-preview",
          "name": "Microsoft.Insights/service",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[parameters('sqlDatabasesNames')[copyIndex()].databaseName]"
          ],
          "properties": {
            "storageAccountId": "[variables('diagnosticStorageAccountId')]",
            "workspaceId": "[variables('diagnosticWorkspaceId')]",
            "logs": [
              {
                "category": "SQLInsights",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('logsRetentionInDays')]",
                  "enabled": true
                }
              },
              {
                "category": "AutomaticTuning",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('logsRetentionInDays')]",
                  "enabled": true
                }
              },
              {
                "category": "QueryStoreRuntimeStatistics",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('logsRetentionInDays')]",
                  "enabled": true
                }
              },
              {
                "category": "QueryStoreWaitStatistics",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('logsRetentionInDays')]",
                  "enabled": true
                }
              },
              {
                "category": "Errors",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('logsRetentionInDays')]",
                  "enabled": true
                }
              },
              {
                "category": "DatabaseWaitStatistics",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('logsRetentionInDays')]",
                  "enabled": true
                }
              },
              {
                "category": "Timeouts",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('logsRetentionInDays')]",
                  "enabled": true
                }
              },
              {
                "category": "Blocks",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('logsRetentionInDays')]",
                  "enabled": true
                }
              },
              {
                "category": "Deadlocks",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('logsRetentionInDays')]",
                  "enabled": true
                }
              }
            ],
            "metrics": [
              {
                "category": "Basic",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('logsRetentionInDays')]",
                  "enabled": true
                }
              }
            ]
          }
        }
      ],
      "dependsOn": [
        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]"
      ],
      "copy": {
        "name": "DatabaseLoop",
        "count": "[length(parameters('sqlDatabasesNames'))]"
      }
    },
    {
      "condition": "[parameters('allowAzureIps')]",
      "type": "Microsoft.Sql/servers/firewallRules",
      "apiVersion": "2015-05-01-preview",
      "name": "[concat(parameters('sqlServerName'),'/',parameters('firewallruleList')[copyIndex()].Name)]",
      "location": "[parameters('location')]",
      "properties": {
        "StartIpAddress": "[parameters('firewallruleList')[copyIndex('firewallRuleCopy')].StartIpAddress]",
        "EndIpAddress": "[parameters('firewallruleList')[copyIndex('firewallRuleCopy')].EndIpAddress]"
      },
      "dependsOn": [
        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]"
      ],
      "copy": {
        "name": "firewallRuleCopy",
        "count": "[length(parameters('firewallruleList'))]"
      }
    },
    {
      "type": "Microsoft.Sql/servers/virtualNetworkRules",
      "apiVersion": "[providers('Microsoft.Sql','servers/virtualNetworkRules').apiVersions[0]]",
      "name": "[concat(parameters('sqlServerName'), '/', parameters('firewallVnetRuleList')[copyIndex()].subnetName)]",
      "properties": {
        "virtualNetworkSubnetId": "[resourceId(parameters('firewallVnetRuleList')[copyIndex()].virtualNetworkSubscription, parameters('firewallVnetRuleList')[copyIndex()].virtualNetworkResourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('firewallVnetRuleList')[copyIndex()].virtualNetworkName, parameters('firewallVnetRuleList')[copyIndex()].subnetName)]",
        "ignoreMissingVnetServiceEndpoint": true
      },
      "dependsOn": [
        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]"
      ],
      "copy": {
        "name": "vNetFirewallLoop",
        "count": "[length(parameters('firewallVnetRuleList'))]"
      }
    }
  ],
  "outputs": {
    "sqlServerdbName": {
      "type": "string",
      "value": "[variables('sqlServerdbName')]",
      "metadata": {
        "description": "The Name of the SQL Server"
      }
    },
    "sqlServerdbResourceId": {
      "type": "string",
      "value": "[variables('sqlServerdbResourceId')]",
      "metadata": {
        "description": "The Resource Id of the SQL Server"
      }
    },
    "sqlServerdbResourceGroup": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The name of the Resource Group with the SQL Server"
      }
    }
  }
}
