{
  "$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "sqlServerName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the SQL server on which the database will be created"
      }
    },
    "sqlAdministratorLogin": {
      "type": "string",
      "metadata": {
        "description": "Required. Administrator username for the server"
      }
    },
    "sqlAdministratorLoginPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Required. The password given to the Server Administrator User"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources"
      }
    },
    "allowAzureIps": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Whether the database is accessible by the Azure services"
      }
    },
    "firewallvNetRuleList": {
      "type": "array",
      "metadata": {
        "description": "Required. SQL Server firewall vNet rules list"
      }
    },
    "firewallruleList": {
      "type": "array",
      "metadata": {
        "description": "Required. SQL Server firewall rule list"
      }
    },
    "diagnosticStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Required. The storage account name where the vulnerability assesments scan results will be stored"
      }
    },
    "diagnosticStorageAccountAccessKey": {
      "type": "string",
      "metadata": {
        "description": "Access key for the storage account to be used for security diagnostics"
      }
    },
    "retentionDays": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "Specify the number of days data will be retained for"
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
      }
    },
    "tagValues": {
      "type": "object",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Azure Resource Tags object"
      }
    }
  },
  "variables": {
    "sqlServerName": "[parameters('sqlServerName')]",
    "sqlServerResourceId": "[resourceId('Microsoft.Sql/servers',variables('sqlServerName'))]",
    "sqlServerApiVersion": "[providers('Microsoft.Sql','servers').apiVersions[0]]",
    "pidName": "[concat('pid-', parameters('cuaId'))]"
  },
  "resources": [
    {
      "condition": "[not(empty(parameters('cuaId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2018-02-01",
      "name": "[variables('pidName')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "[variables('sqlServerApiVersion')]",
      "name": "[variables('sqlServerName')]",
      "location": "[parameters('location')]",
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "properties": {
        "administratorLogin": "[parameters('sqlAdministratorLogin')]",
        "administratorLoginPassword": "[parameters('sqlAdministratorLoginPassword')]",
        "version": "12.0"
      },
      "dependsOn": [],
      "resources": [
        {
          "type": "auditingSettings",
          "apiVersion": "[providers('Microsoft.Sql','servers/auditingSettings').apiVersions[0]]",
          "name": "[concat(parameters('sqlServerName'), '/AuditingSettingsDefault')]",
          "properties": {
            "State": "Enabled",
            "storageEndpoint": "[concat('https://', parameters('diagnosticStorageAccountName'), '.blob.core.windows.net/')]",
            "storageAccountAccessKey": "[parameters('diagnosticStorageAccountAccessKey')]",
            "storageAccountSubscriptionId": "[subscription().subscriptionId]",
            "retentionDays": "[parameters('retentionDays')]",
            "auditActionsAndGroups": [
              "BATCH_STARTED_GROUP",
              "BATCH_COMPLETED_GROUP",
              "APPLICATION_ROLE_CHANGE_PASSWORD_GROUP",
              "BACKUP_RESTORE_GROUP",
              "DATABASE_LOGOUT_GROUP",
              "DATABASE_OBJECT_CHANGE_GROUP",
              "DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP",
              "DATABASE_OBJECT_PERMISSION_CHANGE_GROUP",
              "FAILED_DATABASE_AUTHENTICATION_GROUP",
              "SCHEMA_OBJECT_ACCESS_GROUP",
              "SCHEMA_OBJECT_CHANGE_GROUP",
              "SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP",
              "SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP",
              "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
              "USER_CHANGE_PASSWORD_GROUP",
              "DATABASE_PERMISSION_CHANGE_GROUP",
              "DATABASE_PRINCIPAL_CHANGE_GROUP",
              "DATABASE_PRINCIPAL_IMPERSONATION_GROUP",
              "DATABASE_ROLE_MEMBER_CHANGE_GROUP",
              "DATABASE_OPERATION_GROUP"
            ],
            "isStorageSecondaryKeyInUse": false
          },
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]"
          ]
        },
        {
          "type": "securityAlertPolicies",
          "apiVersion": "[providers('Microsoft.Sql','servers/securityAlertPolicies').apiVersions[0]]",
          "name": "[concat(parameters('sqlServerName'), '/SecurityAlertDefault')]",
          "properties": {
            "state": "Enabled",
            "disabledAlerts": [
              ""
            ],
            "emailAddresses": [
              ""
            ],
            "emailAccountAdmins": true,
            "retentionDays": "[parameters('retentionDays')]"
          },
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]"
          ]
        },
        {
          "type": "vulnerabilityAssessments",
          "apiVersion": "[providers('Microsoft.Sql','servers/vulnerabilityAssessments').apiVersions[0]]",
          "name": "[concat(parameters('sqlServerName'), '/vulnerabilityAssessmentsDefault')]",
          "properties": {
            "storageContainerPath": "[concat('https://',parameters('diagnosticStorageAccountName'), '.blob.core.windows.net/', 'vulnerability-assessment')]",
            "storageAccountAccessKey": "[parameters('diagnosticStorageAccountAccessKey')]",
            "recurringScans": {
              "isEnabled": true,
              "emailSubscriptionAdmins": true,
              "emails": []
            }
          },
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]",
            "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'), '/securityAlertPolicies/SecurityAlertDefault')]"
          ]
        }
      ]
    },
    {
      "condition": "[parameters('allowAzureIps')]",
      "type": "Microsoft.Sql/servers/firewallrules",
      "apiVersion": "[providers('Microsoft.Sql', 'servers/firewallRules').apiVersions[0]]",
      "name": "[concat(parameters('sqlServerName'),'/',parameters('firewallruleList')[copyIndex()].Name)]",
      "location": "[parameters('location')]",
      "properties": {
        "StartIpAddress": "[parameters('firewallruleList')[copyIndex()].StartIpAddress]",
        "EndIpAddress": "parameters('firewallruleList')[copyIndex()].EndIpAddress]"
      },
      "dependsOn": [
        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]"
      ],
      "copy": {
        "name": "firewallRuleCopy",
        "count": "[length(parameters('firewallruleList'))]"
      }
    },
    {
      "type": "Microsoft.Sql/servers/virtualNetworkRules",
      "apiVersion": "[providers('Microsoft.Sql','servers/virtualNetworkRules').apiVersions[0]]",
      "name": "[concat(parameters('sqlServerName'), '/', parameters('firewallVnetRuleList')[copyIndex()].subnetName)]",
      "properties": {
        "virtualNetworkSubnetId": "[resourceId(parameters('firewallVnetRuleList')[copyIndex()].virtualNetworkSubscription, parameters('firewallVnetRuleList')[copyIndex()].virtualNetworkResourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('firewallVnetRuleList')[copyIndex()].virtualNetworkName, parameters('firewallVnetRuleList')[copyIndex()].subnetName)]",
        "ignoreMissingVnetServiceEndpoint": true
      },
      "dependsOn": [
        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]"
      ],
      "copy": {
        "name": "VnetFirewallLoop",
        "count": "[length(parameters('firewallVnetRuleList'))]"
      }
    }
  ],
  "outputs": {
    "sqlServerName": {
      "type": "string",
      "value": "[variables('sqlServerName')]",
      "metadata": {
        "description": "The Name of the SQL Server deployed."
      }
    },
    "sqlServerResourceId": {
      "type": "string",
      "value": "[variables('sqlServerResourceId')]",
      "metadata": {
        "description": "The Resource Id of the SQL Server deployed."
      }
    },
    "sqlServerResourceGroup": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The name of the Resource Group the SQL Server is created in."
      }
    }
  }
}