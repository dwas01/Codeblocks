{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "keyVaultName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Required. Name of the Azure Key Vault"
      }
    },
    "accessPolicies": {
      "type": "array",
      "defaultValue": "{}",
      "metadata": {
        "description": "Required. Access policies object"
      }
    },
    "secretsObject": {
      "type": "secureObject",
      "defaultValue": "{}",
      "metadata": {
        "description": "Required. Secrets {\"secretName\":\"\",\"secretValue\":\"\"} wrapped in a secure object"
      }
    },
    "enableSoftDelete": {
      "type": "bool",
      "allowedValues": [
        true,
        false
      ],
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies if the vault soft delete feature is enabled"
      }
    },
    "enableVaultForDeployment": {
      "type": "bool",
      "allowedValues": [
        true,
        false
      ],
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Specifies if the vault is enabled for deployment by script or compute"
      }
    },
    "enableVaultForTemplateDeployment": {
      "type": "bool",
      "allowedValues": [
        true,
        false
      ],
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Specifies if the vault is enabled for a template deployment"
      }
    },
    "enableVaultForDiskEncryption": {
      "type": "bool",
      "allowedValues": [
        true,
        false
      ],
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
      }
    },
    "vaultSku": {
      "type": "string",
      "allowedValues": [
        "Premium"
      ],
      "defaultValue": "Premium",
      "metadata": {
        "description": "Optional. Specifies the SKU for the vault"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources"
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Required. Resource identifier of the Diagnostic Storage Account"
      }
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Reguired. Resource identifier of Log Analytics Workspace"
      }
    },
    "logsRetentionInDays": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 0,
      "maxValue": 365,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for, a value of 0 will retain data indefinitely"
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
      }
    },
    "tagValues": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Azure Resource Tags object"
      }
    }
  },
  "variables": {
    "keyVaultName": "[parameters('keyVaultName')]",
    "keyVaultResourceId": "[resourceId('Microsoft.KeyVault/vaults',variables('keyVaultName'))]",
    "keyVaultApiVersion": "[providers('Microsoft.KeyVault','vaults').apiVersions[0]]",
    "diagnosticSettingName": "[concat(variables('keyVaultName'),'/','Microsoft.Insights/service')]",
    "diagnosticStorageAccountId": "[parameters('diagnosticStorageAccountId')]",
    "diagnosticWorkspaceId": "[parameters('logAnalyticsWorkspaceId')]",
    "pidName": "[concat('pid-', parameters('cuaId'))]"
  },
  "resources": [
    {
      "condition": "[not(empty(parameters('cuaId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2018-02-01",
      "name": "[variables('pidName')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "[variables('keyVaultApiVersion')]",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "properties": {
        "enableSoftDelete": "[if(equals(parameters('enableSoftDelete'),'false'),json('null'),parameters('enableSoftDelete'))]",
        "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
        "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
        "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": "[parameters('accessPolicies')]",
        "sku": {
          "name": "[parameters('vaultSku')]",
          "family": "A"
        }
      },
      "resources": [
        {
          "condition": "[not(empty(parameters('logAnalyticsWorkspaceId')))]",
          "type": "Microsoft.KeyVault/vaults/providers/diagnosticsettings",
          "apiVersion": "2017-05-01-preview",
          "name": "[variables('diagnosticSettingName')]",
          "dependsOn": [
            "[variables('keyVaultResourceId')]"
          ],
          "properties": {
            "storageAccountId": "[variables('diagnosticStorageAccountId')]",
            "workspaceId": "[variables('diagnosticWorkspaceId')]",
            "logs": [
              {
                "category": "AuditEvent",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": "[parameters('logsRetentionInDays')]"
                }
              }
            ]
          }
        }
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "[variables('keyVaultApiVersion')]",
      "name": "[concat(parameters('keyVaultName'), '/', parameters('secretsObject').secrets[copyIndex()].secretName)]",
      "properties": {
        "value": "[parameters('secretsObject').secrets[copyIndex()].secretValue]"
      },
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
      ],
      "copy": {
        "name": "secretsCopy",
        "count": "[length(parameters('secretsObject').secrets)]"
      }
    }
  ],
  "outputs": {
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]",
      "metadata": {
        "description": "The Name of the KeyVault"
      }
    },
    "keyVaultResourceId": {
      "type": "string",
      "value": "[variables('keyVaultResourceId')]",
      "metadata": {
        "description": "The ResourceId of the KeyVault"
      }
    },
    "keyVaultResourceGroup": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The name of the Resource Group with the KeyVault"
      }
    }
  }
}