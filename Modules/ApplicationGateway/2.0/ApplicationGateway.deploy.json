{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "applicationGatewayName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name to be used for the Application Gateway"
      }
    },
    "sku": {
      "type": "string",
      "allowedValues": [
        "Standard_Small",
        "Standard_Medium",
        "Standard_Large",
        "WAF_Medium",
        "WAF_Large"
      ],
      "defaultValue": "WAF_Medium",
      "metadata": {
        "description": "Optional. The name of the SKU for the Application Gateway"
      }
    },
    "capacity": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 10,
      "metadata": {
        "description": "Optional. The number of Application instances to be configured"
      }
    },
    "http2Enabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enables HTTP/2 support"
      }
    },
    "publicIPAllocationIdleTimeoutInMinutes": {
      "type": "int",
      "defaultValue": 10,
      "minValue": 4,
      "maxValue": 30,
      "metadata": {
        "description": "Optional. The maximum allowed idle time in minutes for Public IP allocation"
      }
    },
    "vNetName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Virtual Network where the Application Gateway will be deployed"
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of Gateway Subnet Name where the Application Gateway will be deployed"
      }
    },
    "vNetResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Optional. The name of the Virtual Network Resource Group where the Application Gateway will be deployed"
      }
    },
    "vNetSubscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "Optional. The Subscription Id of the Virtual Network where the Application Gateway will be deployed"
      }
    },
    "frontendPrivateIPAddress": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The private IP within the Application Gateway subent to be used as frontend private address",
        "limitations": "The IP must be available in the configured subnet. If empty, allocation method will be set to dynamic. Once a method (static or dynamic) has been configured, it cannot be changed"
      }
    },
    "sslBase64CertificateData": {
      "type": "securestring",
      "metadata": {
        "description": "Required. The SSL base64-coded Certificate that will be used to configure the HTTPS listeners"
      }
    },
    "sslCertificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "Required. The password of the SSL base64-coded Certificate that will be used to configure the HTTPS listeners"
      }
    },
    "backendPools": {
      "type": "array",
      "metadata": {
        "description": "Required. The backend pools to be configured"
      }
    },
    "backendHttpConfigurations": {
      "type": "array",
      "metadata": {
        "description": "Required. The backend HTTP settings to be configured. These HTTP settings will be used to rewrite the incoming HTTP requests for the backend pools"
      }
    },
    "frontendHttpsListeners": {
      "type": "array",
      "metadata": {
        "description": "Required. The frontend https listeners to be configured"
      }
    },
    "frontendHttpRedirects": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Required. The http redirects to be configured. Each redirect will route http traffic to a pre-defined frontEnd https listener"
      }
    },
    "routingRules": {
      "type": "array",
      "metadata": {
        "description": "Required. The routing rules to be configured. These rules will be used to route requests from frontend listeners to backend pools using a backend HTTP configuration"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources"
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "metadata": {
        "description": "Required. Resource identifier of the Diagnostic Storage Account"
      }
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "metadata": {
        "description": "Required. Resource identifier of Log Analytics Workspace"
      }
    },
    "logsRetentionInDays": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 0,
      "maxValue": 365,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely"
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution Id (GUID). This GUID must be previously registered"
      }
    },
    "tagValues": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Azure Resource Tags object"
      }
    }
  },
  "variables": {
    "applicationGatewayName": "[parameters('applicationGatewayName')]",
    "applicationGatewayResourceId": "[resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName'))]",
    "applicationGatewayApiVersion": "[providers('Microsoft.ApiManagement','service').apiVersions[0]]",
    "diagnosticSettingName": "[concat(variables('applicationGatewayName'), '/','Microsoft.Insights/service')]",
    "diagnosticStorageAccountId": "[parameters('diagnosticStorageAccountId')]",
    "diagnosticWorkspaceId": "[parameters('logAnalyticsWorkspaceId')]",
    "subnetResourceId": "[resourceId(parameters('vNetSubscriptionId'), parameters('vNetResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('subnetName'))]",
    "publicIPResourceName": "[concat(parameters('applicationGatewayName'), 'Pip')]",
    "publicIPResourceId": "[resourceId('Microsoft.Network/publicIPAddresses/', variables('publicIPResourceName'))]",
    "sslCertificateName": "sslCertificate01",
    "gatewayIPConfigurationName": "gatewayIpConfiguration01",
    "frontendPublicIPConfigurationName": "public",
    "frontendPrivateIPConfigurationName": "private",
    "frontendPrivateIPDynamicConfiguration": {
      "privateIPAllocationMethod": "Dynamic",
      "subnet": {
        "id": "[variables('subnetResourceId')]"
      }
    },
    "frontendPrivateIPStaticConfiguration": {
      "privateIPAllocationMethod": "Static",
      "privateIPAddress": "[parameters('frontendPrivateIPAddress')]",
      "subnet": {
        "id": "[variables('subnetResourceId')]"
      }
    },
    "backendPoolsCount": "[length(parameters('backendPools'))]",
    "backendHttpConfigurationsCount": "[length(parameters('backendHttpConfigurations'))]",
    "frontendHttpsListenersCount": "[length(parameters('frontendHttpsListeners'))]",
    "frontendHttpListenersCount": "[length(parameters('frontendHttpRedirects'))]",
    "frontendListenerhttpsCertificateObject": {
      "Id": "[concat(variables('applicationGatewayResourceId'), '/sslCertificates/', variables('sslCertificateName'))]"
    },
    "routingRulesCount": "[length(parameters('routingRules'))]",
    "redirectConfigurationsHttpRedirectNamePrefix": "httpRedirect",
    "httpListenerhttpRedirectNamePrefix": "httpRedirect",
    "requestRoutingRuleHttpRedirectNamePrefix": "httpRedirect",
    "wafConfiguration": {
      "enabled": true,
      "firewallMode": "Detection",
      "ruleSetType": "OWASP",
      "ruleSetVersion": "3.0",
      "disabledRuleGroups": [],
      "requestBodyCheck": true,
      "maxRequestBodySizeInKb": "128"
    },
    "sslCertificates": [
      {
        "name": "[variables('sslCertificateName')]",
        "properties": {
          "data": "[parameters('sslBase64CertificateData')]",
          "password": "[parameters('sslCertificatePassword')]"
        }
      }
    ],
    "copy": [
      {
        "name": "backendAddressPools",
        "count": "[variables('backendPoolsCount')]",
        "input": {
          "name": "[parameters('backendPools')[copyIndex('backendAddressPools')].backendPoolName]",
          "type": "Microsoft.Network/applicationGateways/backendAddressPools",
          "properties": {
            "BackendAddresses": "[parameters('backendPools')[copyIndex('backendAddressPools')].BackendAddresses]"
          }
        }
      },
      {
        "name": "probes",
        "count": "[variables('backendHttpConfigurationsCount')]",
        "input": {
          "name": "[concat(parameters('backendHttpConfigurations')[copyIndex('probes')].backendHttpConfigurationName,'Probe')]",
          "type": "Microsoft.Network/applicationGateways/probes",
          "properties": {
            "protocol": "[parameters('backendHttpConfigurations')[copyIndex('probes')].protocol]",
            "host": "[parameters('backendHttpConfigurations')[copyIndex('probes')].healthProbe.host]",
            "path": "[parameters('backendHttpConfigurations')[copyIndex('probes')].healthProbe.path]",
            "interval": 30,
            "timeout": 30,
            "unhealthyThreshold": 3,
            "minServers": 0,
            "match": {
              "body": "",
              "statusCodes": "[parameters('backendHttpConfigurations')[copyIndex('probes')].healthProbe.statusCodes]"
            }
          }
        }
      },
      {
        "name": "backendHttpConfigurations",
        "count": "[variables('backendHttpConfigurationsCount')]",
        "input": {
          "name": "[parameters('backendHttpConfigurations')[copyIndex('backendHttpConfigurations')].backendHttpConfigurationName]",
          "properties": {
            "Port": "[parameters('backendHttpConfigurations')[copyIndex('backendHttpConfigurations')].port]",
            "Protocol": "[parameters('backendHttpConfigurations')[copyIndex('backendHttpConfigurations')].protocol]",
            "CookieBasedAffinity": "[parameters('backendHttpConfigurations')[copyIndex('backendHttpConfigurations')].cookieBasedAffinity]",
            "pickHostNameFromBackendAddress": "[parameters('backendHttpConfigurations')[copyIndex('backendHttpConfigurations')].pickHostNameFromBackendAddress]",
            "probeEnabled": "[parameters('backendHttpConfigurations')[copyIndex('backendHttpConfigurations')].probeEnabled]",
            "probe": {
              "id": "[concat(variables('applicationGatewayResourceId'), '/probes/', concat(parameters('backendHttpConfigurations')[copyIndex('backendHttpConfigurations')].backendHttpConfigurationName,'Probe'))]"
            }
          }
        }
      },
      {
        "name": "frontendHttpsPorts",
        "count": "[variables('frontendHttpsListenersCount')]",
        "input": {
          "name": "[concat('port',parameters('frontendHttpsListeners')[copyIndex('frontendHttpsPorts')].port)]",
          "properties": {
            "Port": "[parameters('frontendHttpsListeners')[copyIndex('frontendHttpsPorts')].port]"
          }
        }
      },
      {
        "name": "frontendHttpsListeners",
        "count": "[variables('frontendHttpsListenersCount')]",
        "input": {
          "name": "[parameters('frontendHttpsListeners')[copyIndex('frontendHttpsListeners')].frontendListenerName]",
          "properties": {
            "FrontendIPConfiguration": {
              "Id": "[concat(variables('applicationGatewayResourceId'),'/frontendIPConfigurations/',parameters('frontendHttpsListeners')[copyIndex('frontendHttpsListeners')].frontendIPType)]"
            },
            "FrontendPort": {
              "Id": "[concat(variables('applicationGatewayResourceId'),'/frontendPorts/',concat('port',parameters('frontendHttpsListeners')[copyIndex('frontendHttpsListeners')].port))]"
            },
            "Protocol": "https",
            "SslCertificate": "[variables('frontendListenerhttpsCertificateObject')]"
          }
        }
      },
      {
        "name": "httpsRequestRoutingRules",
        "count": "[variables('routingRulesCount')]",
        "input": {
          "name": "[concat(parameters('routingRules')[copyIndex('httpsRequestRoutingRules')].frontendListenerName,'-',concat(parameters('routingRules')[copyIndex('httpsRequestRoutingRules')].backendHttpConfigurationName),'-',concat(parameters('routingRules')[copyIndex('httpsRequestRoutingRules')].backendHttpConfigurationName))]",
          "properties": {
            "RuleType": "Basic",
            "httpListener": {
              "id": "[concat(variables('applicationGatewayResourceId'), '/httpListeners/', parameters('routingRules')[copyIndex('httpsRequestRoutingRules')].frontendListenerName)]"
            },
            "backendAddressPool": {
              "id": "[concat(variables('applicationGatewayResourceId'), '/backendAddressPools/', parameters('routingRules')[copyIndex('httpsRequestRoutingRules')].backendPoolName)]"
            },
            "backendHttpSettings": {
              "id": "[concat(variables('applicationGatewayResourceId'), '/backendHttpSettingsCollection/', parameters('routingRules')[copyIndex('httpsRequestRoutingRules')].backendHttpConfigurationName)]"
            }
          }
        }
      },
      {
        "name": "frontendHttpPorts",
        "count": "[if(equals(variables('frontendHttpListenersCount'),0),1,variables('frontendHttpListenersCount'))]",
        "input": {
          "name": "[if(equals(variables('frontendHttpListenersCount'),0),'dummy',concat('port',parameters('frontendHttpRedirects')[copyIndex('frontendHttpPorts')].port))]",
          "properties": {
            "Port": "[if(equals(variables('frontendHttpListenersCount'),0),0,parameters('frontendHttpRedirects')[copyIndex('frontendHttpPorts')].port)]"
          }
        }
      },
      {
        "name": "frontendHttpListeners",
        "count": "[if(equals(variables('frontendHttpListenersCount'),0),1,variables('frontendHttpListenersCount'))]",
        "input": {
          "name": "[if(equals(variables('frontendHttpListenersCount'),0),'dummy',concat(variables('httpListenerhttpRedirectNamePrefix'),parameters('frontendHttpRedirects')[copyIndex('frontendHttpListeners')].port))]",
          "properties": {
            "FrontendIPConfiguration": {
              "Id": "[if(equals(variables('frontendHttpListenersCount'),0),'dummy',concat(variables('applicationGatewayResourceId'),'/frontendIPConfigurations/',parameters('frontendHttpRedirects')[copyIndex('frontendHttpListeners')].frontendIPType))]"
            },
            "FrontendPort": {
              "Id": "[if(equals(variables('frontendHttpListenersCount'),0),'dummy',concat(variables('applicationGatewayResourceId'),'/frontendPorts/',concat('port',parameters('frontendHttpRedirects')[copyIndex('frontendHttpListeners')].port)))]"
            },
            "Protocol": "http"
          }
        }
      },
      {
        "name": "httpRequestRoutingRules",
        "count": "[if(equals(variables('frontendHttpListenersCount'),0),1,variables('frontendHttpListenersCount'))]",
        "input": {
          "name": "[if(equals(variables('frontendHttpListenersCount'),0),'dummy',concat(variables('requestRoutingRuleHttpRedirectNamePrefix'),parameters('frontendHttpRedirects')[copyIndex('httpRequestRoutingRules')].port,'-',parameters('frontendHttpRedirects')[copyIndex('httpRequestRoutingRules')].frontendListenerName))]",
          "properties": {
            "RuleType": "Basic",
            "httpListener": {
              "id": "[if(equals(variables('frontendHttpListenersCount'),0),'dummy',concat(variables('applicationGatewayResourceId'), '/httpListeners/', concat(variables('httpListenerhttpRedirectNamePrefix'),parameters('frontendHttpRedirects')[copyIndex('httpRequestRoutingRules')].port)))]"
            },
            "redirectConfiguration": {
              "id": "[if(equals(variables('frontendHttpListenersCount'),0),'dummy',concat(variables('applicationGatewayResourceId'), '/redirectConfigurations/', concat(variables('redirectConfigurationsHttpRedirectNamePrefix'),parameters('frontendHttpRedirects')[copyIndex('httpRequestRoutingRules')].port)))]"
            }
          }
        }
      },
      {
        "name": "httpRedirectConfigurations",
        "count": "[if(equals(variables('frontendHttpListenersCount'),0),1,variables('frontendHttpListenersCount'))]",
        "input": {
          "name": "[if(equals(variables('frontendHttpListenersCount'),0),'dummy',concat(variables('redirectConfigurationsHttpRedirectNamePrefix'),parameters('frontendHttpRedirects')[copyIndex('httpRedirectConfigurations')].port))]",
          "properties": {
            "redirectType": "Permanent",
            "includePath": true,
            "includeQueryString": true,
            "requestRoutingRules": [
              {
                "id": "[if(equals(variables('frontendHttpListenersCount'),0),'dummy',concat(variables('ApplicationGatewayResourceID'), '/requestRoutingRules/', concat(variables('requestRoutingRuleHttpRedirectNamePrefix'),parameters('frontendHttpRedirects')[copyIndex('httpRedirectConfigurations')].port)))]"
              }
            ],
            "targetListener": {
              "id": "[if(equals(variables('frontendHttpListenersCount'),0),'dummy',concat(variables('ApplicationGatewayResourceID'), '/httpListeners/', parameters('frontendHttpRedirects')[copyIndex('httpRedirectConfigurations')].frontendListenerName))]"
            }
          }
        }
      }
    ],
    "emptyArray": [],
    "frontendPorts": "[concat(variables('frontendHttpPorts'),if(empty(parameters('frontendHttpRedirects')),variables('emptyArray'),variables('frontendHttpPorts')))]",
    "httpListeners": "[concat(variables('frontendHttpsListeners'),if(empty(parameters('frontendHttpRedirects')),variables('emptyArray'),variables('frontendHttpListeners')))]",
    "redirectConfigurations": "[if(empty(parameters('frontendHttpRedirects')),variables('emptyArray'),variables('httpRedirectConfigurations'))]",
    "requestRoutingRules": "[concat(variables('httpsRequestRoutingRules'),if(empty(parameters('frontendHttpRedirects')),variables('emptyArray'),variables('httpRequestRoutingRules')))]",
    "pidName": "[concat('pid-', parameters('cuaId'))]"
  },
  "resources": [
    {
      "condition": "[not(empty(parameters('cuaId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2018-02-01",
      "name": "[variables('pidName')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2017-08-01",
      "name": "[variables('publicIPResourceName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "idleTimeoutInMinutes": "[parameters('publicIPAllocationIdleTimeoutInMinutes')]"
      }
    },
    {
      "type": "Microsoft.Network/applicationGateways",
      "name": "[variables('applicationGatewayName')]",
      "apiVersion": "[variables('applicationGatewayApiVersion')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('publicIPResourceId')]"
      ],
      "properties": {
        "sku": {
          "name": "[parameters('sku')]",
          "tier": "[substring(parameters('sku'),0,indexOf(parameters('sku'),'_'))]",
          "capacity": "[parameters('capacity')]"
        },
        "gatewayIPConfigurations": [
          {
            "name": "[variables('gatewayIPConfigurationName')]",
            "properties": {
              "subnet": {
                "id": "[variables('subnetResourceId')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('frontendPrivateIPConfigurationName')]",
            "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations",
            "properties": "[if(empty(parameters('frontendPrivateIPAddress')),variables('frontendPrivateIPDynamicConfiguration'),variables('frontendPrivateIPStaticConfiguration'))]"
          },
          {
            "name": "[variables('frontendPublicIPConfigurationName')]",
            "properties": {
              "PublicIPAddress": {
                "id": "[variables('publicIPResourceId')]"
              }
            }
          }
        ],
        "sslCertificates": "[if(empty(parameters('sslBase64CertificateData')), json('null'), variables('sslCertificates'))]",
        "backendAddressPools": "[variables('backendAddressPools')]",
        "probes": "[variables('probes')]",
        "backendHttpSettingsCollection": "[variables('backendHttpConfigurations')]",
        "frontendPorts": "[variables('frontendPorts')]",
        "httpListeners": "[variables('httpListeners')]",
        "redirectConfigurations": "[variables('redirectConfigurations')]",
        "requestRoutingRules": "[variables('requestRoutingRules')]",
        "enableHttp2": "[parameters('http2Enabled')]",
        "webApplicationFirewallConfiguration": "[if(startsWith(parameters('sku'),'WAF'), variables('wafConfiguration'),json('null'))]"
      },
      "resources": [
        {
          "type": "Microsoft.Network/applicationGateways/providers/diagnosticSettings",
          "apiVersion": "2017-05-01-preview",
          "name": "[variables('diagnosticSettingName')]",
          "dependsOn": [
            "[variables('applicationGatewayResourceId')]"
          ],
          "properties": {
            "storageAccountId": "[variables('diagnosticStorageAccountId')]",
            "workspaceId": "[variables('diagnosticWorkspaceId')]",
            "logs": [
              {
                "category": "ApplicationGatewayPerformanceLog",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('logsRetentionInDays')]",
                  "enabled": true
                }
              },
              {
                "category": "ApplicationGatewayAccessLog",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('logsRetentionInDays')]",
                  "enabled": true
                }
              },
              {
                "category": "ApplicationGatewayFirewallLog",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('logsRetentionInDays')]",
                  "enabled": true
                }
              }
            ],
            "metrics": [
              {
                "timeGrain": "PT1M",
                "enabled": true,
                "retentionPolicy": {
                  "days": "[parameters('logsRetentionInDays')]",
                  "enabled": true
                }
              }
            ]
          }
        }
      ]
    }
  ],
  "outputs": {
    "applicationGatewayName": {
      "type": "string",
      "value": "[variables('applicationGatewayName')]",
      "metadata": {
        "description": "The Application Gateway Name"
      }
    },
    "applicationGatewayResourceId": {
      "type": "string",
      "value": "[variables('applicationGatewayResourceId')]",
      "metadata": {
        "description": "The Resource Id of the Application Gateway"
      }
    },
    "applicationGatewayResourceGroup": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The name of the Resource Group with the Application Gateway"
      }
    }
  }
}
